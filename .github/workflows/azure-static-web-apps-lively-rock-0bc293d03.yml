name: Despliegue de Next.js Estático a App Service

on:
  push:
    branches:
      - main # Desplegar solo cuando se haga push a la rama main

env:
  NODE_VERSION: "20" # Usar una versión de Node.js LTS
  BUILD_DIR: "out" # Directorio de salida generado por 'next export'
  DEPLOY_DIR: "deploy_artifact" # Directorio temporal para la subida

jobs:
  build_and_deploy:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout del Repositorio
        uses: actions/checkout@v4

      # --- Fase de Build (Creación del Sitio Estático) ---
      - name: Configuración de Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: "npm"

      - name: Instalación de Dependencias
        run: npm ci

      - name: Build y Exportación Estática de Next.js
        # El comando 'next build && next export' (definido en tu package.json)
        # generará el contenido final dentro de la carpeta 'out'
        run: npm run build

      # --- Fase de Preparación del Despliegue (Solución al problema de 'out') ---
      - name: Preparar Directorio de Despliegue
        # 1. Crear el directorio temporal
        run: |
          mkdir ${{ env.DEPLOY_DIR }}
          # 2. Copiar todo el contenido de 'out' a la raíz del artefacto de despliegue
          cp -R ${{ env.BUILD_DIR }}/. ${{ env.DEPLOY_DIR }}/
          echo "Contenido de 'out' copiado a la raíz de despliegue."

      # --- Fase de Despliegue a Azure App Service ---
      - name: Despliegue a Azure Web App
        uses: azure/webapps-deploy@v2
        with:
          # Nombre de tu App Service en Azure (Ej: 'mywebapp-random')
          app-name: "NombreDeTuAppService"
          # Tu slot de despliegue (generalmente 'production')
          slot-name: "production"
          # El Secreto de Credenciales (debes crearlo en GitHub)
          publish-profile: ${{ secrets.AZURE_WEBAPP_PUBLISH_PROFILE }}
          # La ruta al contenido que debe subirse (nuestro directorio temporal)
          package: ${{ env.DEPLOY_DIR }}
